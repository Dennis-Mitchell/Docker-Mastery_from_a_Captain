*========================================*
*=              Section 3:              =*
*=         Creating and Using           =* 
*=       ContainerssLike a Boss         =*
*========================================*
*** Section 3 *** üòù
===================
   Lesson 18
===================
Check our docker install and config:

docker version
docker info 
docker
echo hi bb

Docker command format
    new management commands format:
docker <command> <sub-command> (options)
    old way (still works):
docker <command> (options)


===================
   Lesson 19
===================
Starting a Nginx Container:

image vs container
- image is the binaries (class) 
- container is an instance (object)

run/stop/remove
check logs and processes

Docker Toolbox: http://192.168.99.100

start a new container with: run
start an old container: start
docker run -dp 80:80 nginx
docker run --name fart -dp 80:80 nginx
docker top fart
docker rm <id> -f
docker ps
docker container ls 
docker container ls -a
docker stop <id>
docker container stop <id>
docker logs <id>

===================
   Lesson 20
===================
Debrief: What happens when we run a container:
  
===================
   Lesson 21
===================
Container VS. VM: t's just a process:

docker run --name mongo -d mongo
list running processes in specific container
docker top mongo
ps aux | grep mongo
docker container -h


===================
   Lesson 22
===================
Windows 10 Docker Containers:

Windows Containers and Docker: 101:
https://www.youtube.com/watch?v=066-9yw8-7c

Beyond \ - the path to Windows and Linux parity in Docker
https://www.youtube.com/watch?v=4ZY_4OeyJsw

Docker + Microsoft - Investing in the Future of your Applications
https://www.youtube.com/watch?v=QASAqcuuzgI

===================
   Lesson 23
===================
Assignment: Manage Multiple Containers:

*-- Start fresh --*
docker container prune
docker run --name nginx -dp 80:80 nginx
docker run --name httpd -dp 8080:80 httpd
docker start  httpd 
docker run -e MYSQL_RANDOM_ROOT_PASSWORD=yes --name mysql -dp 3306:3306 mysql
docker logs mysql 2>&1 | grep "PASSWORD"

STOP ALL:
docker stop $(docker ps -a -q)
docker stop $(docker ps -aq)
REMOVE ALL:
docker rm $(docker ps -a -q)

===================
   Lesson 25
===================
What's going on in Containers:

whats going on in containers
docker container top && echo list process of container
docker container inspect && echo details of how one container started
docker inspect nginx
docker stats && echo performance stats for all containers in real time
docker ps && echo print all running containers
docker start nginx
docker start mysql
docker ps -a --format "{{.Names}} {{.ID}} {{.Ports}} {{.Status}}"
===================
   Lesson 26
===================
Getting Shell inside containers:

docker container run -it && echo start a new container interactively
docker container exec -it bash/sh &&  echo run shell in existing container

docker run -it --name proxy nginx sh
ls -la
docker run -it --name ubuntu ubuntu
docker start -ai ubuntu
docker ps
<C-p><C-q> to exit container and turn into a daemon
docker exec -it ubuntu sh
docker pull alpine
docker image ls 
docker images
docker run -itd --name al alpine
===================
   Lesson 27
===================
Docker Networks:

docker port nginx
docker inspect nginx 
docker inspect nginx --format "{{.NetworkSettings.IPAddress}}"
ifconfig en0
batteries included but removable
===================
   Lesson 28
===================
Update PDF:

use nginx:alpine for ping
===================
   Lesson 29
===================
Docker Networks: CLI

docker network ls
docker network inspect
docker network inspect my-net
docker network create --driver
docker network connect <net-work> <container>
docker network disconnect

"bridge" is the typical virtual network
"host" gains performance skips virtual network sacrifices security
"none" removes eth0 and only localhost is avaiable

docker network create my_app_net
docker run -d --name new_nginx --network  my_app_net nginx:alpine
docker network inspect my_app_net
docker network connect  my_app_net al
docker inspect al
===================
   Lesson 30
===================
Docker Networks: DNS and How containers Find Each Other

DNS is the key to easy inter-container comms
See how it works by default with cusstom networks
Use --link to eanable DNS on default bridge network

docker run -d --name my_nginx --network my_app_net nginx:alpine
docker network inspect my_app_net
docker exec -it my_nginx ping new_nginx
Use custom networks instead of 'bridge'
===================
   Lesson 31
===================
Asssignment Requirements: CLI App Testing:

- Know how to use -it to get shell in container
- check curl cli tool version
- Use centos:7 and ubuntu:14.04, using -it
- Use --rm option to save clean up time
- ensure curl is installed and on lastet version for that distro
    docker run -it --rm centos:7 bash
    docker run -it --rm ubuntu:14.04 bash
    apt-get update && apt-get install curl -y
    yum update curl
    curl --version

===================
   Lesson 33
===================
FIXME: Bug in Alpine 3:10 
nslookup search. must be added

===================
   Lesson 34
===================
Docker Engine 1.11 allows multiple containers on a created network to respond
to the same DNS adress
- Create a new virtual network (default bridge diver)
- Create two containers from elasticsearch:2 image
- Research and use --network-alias search
- Run nslookup search with --net to see the two containers for the same DNS name
- Run centos curl -s search:9200 with --net multiple time until i see both names
docker network create my-net
docker pull elasticsearch:2
docker run -itd elasticsearch:2 --tag el --network=my-net --alias here 
===================
   Lesson 35
===================
Assignment Answers: DNS Round Robin Test

docker network create dude
docker run -d --net dude --net-alias search elasticsearch:2
docker run -d --net dude --net-alias search elasticsearch:2
docker run --rm --net dude alpine nslookup search
docker run --rm --net dude centos curl -s search:9200

*========================================*
*=              Section 4:              =*
*=  Container Images, Where to  find    =* 
*=    them and how to build them        =*
*========================================*

===================
   Lesson 36
===================

What's in an image (and what isn't)
- App binaries and dependencies
- Metadata about the image data and how to run the image
- Official definition: "An image is an ordered collection of root filesytem
changes and the corresponding execution parameters for use with a container
runtime."
- Not a complete OS. No kernel, kernel modules (e.g. drivers)

All about images

Using Docker Hub registry
Managing our own images     

===================
   Lesson 37
===================
The Mighty hub: Using Docker Hub Registry Images
Explore in dockerhub will list the official images

